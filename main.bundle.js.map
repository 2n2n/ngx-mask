{"version":3,"sources":["webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/ng2-mask/mask.directive.ts","webpack:///./src/app/ng2-mask/ng2-mask.module.ts","webpack:///./src/environments/environment.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 151\n// module chunks = 1","module.exports = \"<style>\\nmd-sidenav {\\n  display: flex;\\n  overflow: visible;\\n}\\n\\n</style>\\n\\n<md-sidenav-container>\\n\\n  <md-sidenav mode=\\\"side\\\" opened=\\\"false\\\">\\n    Side menu\\n  </md-sidenav>\\n\\n  <div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <header>\\n          <h1>\\n            <span class=\\\"jq-label\\\">Angular2</span>\\n            <span class=\\\"plugin-name\\\">Mask Plugin</span>\\n          </h1>\\n          <span class=\\\"subtitle\\\">An Angular2 Plugin to make masks on form fields and html elements.</span>\\n        </header>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\n\\n          <md-grid-tile>\\n            <md-toolbar color=\\\"primary\\\">\\n              <span>Examples</span>\\n            </md-toolbar>\\n          </md-grid-tile>\\n\\n        </md-grid-list>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Mask common case</md-card-title>\\n            <md-card-subtitle>An case of date mask</md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Date\\\" mask=\\\"00/00/0000\\\" [formControl]=\\\"form\\\" [(ngModel)]=\\\"dateModel\\\">\\n                  <md-hint><b>Mask:</b> 00/00/0000</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ form.value ? form.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ dateModel ? dateModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Other common cases</md-card-title>\\n            <md-card-subtitle>Other common cases that you could apply in your projects. Try your self. :D</md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Date and Hour\\\" mask=\\\"00/00/00 00:00:00\\\">\\n                  <md-hint><b>Mask:</b> 00/00/00 00:00:00</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Hour\\\" mask=\\\"00:00:00\\\">\\n                  <md-hint><b>Mask:</b> 00:00:00</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Mixed Type\\\" mask=\\\"AAA 000-S0S\\\">\\n                  <md-hint><b>Mask:</b> AAA 000-S0S</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Phone\\\" mask=\\\"(000) 000-0000\\\">\\n                  <md-hint><b>Mask:</b> (000) 000-0000</md-hint>\\n                </md-input-container>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Masks and special characters</md-card-title>\\n            <md-card-subtitle>\\n              You could define if you want special characters propagate to the model or not with the\\n              attribute <b>specialCharacters</b>.\\n            </md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"CPF\\\" [specialCharacters]=\\\"false\\\" mask=\\\"000.000.000-00\\\" [formControl]=\\\"cpfFormControl\\\" [(ngModel)]=\\\"cpfModel\\\">\\n                  <md-hint><b>Mask:</b> 000.000.000-00</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ cpfFormControl.value ? cpfFormControl.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ cpfModel ? cpfModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Clear if not match</md-card-title>\\n            <md-card-subtitle>\\n              You could clear the input if the value not match the mask, you'll just need to set <b>clearIfNotMatch</b> attribute.\\n            </md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Clear if not match\\\" [clearIfNotMatch]=\\\"true\\\" mask=\\\"000.000\\\"\\n                    [formControl]=\\\"clearIfNotMatchForm\\\" [(ngModel)]=\\\"clearIfNotMatchModel\\\">\\n                  <md-hint><b>Mask:</b> 000.000</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ clearIfNotMatchForm.value ? clearIfNotMatchForm.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ clearIfNotMatchModel ? clearIfNotMatchModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\n\\n          <md-grid-tile>\\n            <md-toolbar color=\\\"primary\\\">\\n              <span>Documentation - comming soon...</span>\\n            </md-toolbar>\\n          </md-grid-tile>\\n\\n        </md-grid-list>\\n\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n</md-sidenav-container>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 153\n// module chunks = 1","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 82;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 82\n// module chunks = 1","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, ElementRef, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  public form: FormControl;\n  public dateModel: string;\n\n  public cpfFormControl: FormControl;\n  public cpfModel: string;\n\n  public clearIfNotMatchForm: FormControl;\n  public clearIfNotMatchModel: string;\n\n  public constructor() {\n    this.form = new FormControl('30081991');\n    this.cpfFormControl = new FormControl('04787954778');\n    this.clearIfNotMatchForm = new FormControl();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MdButtonModule, MdCardModule, MdGridListModule, MdIconModule, MdInputModule,\n  MdListModule,\n  MdSelectModule, MdSidenavModule,\n  MdToolbarModule\n}\n  from\n    '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { NgModule } from '@angular/core';\nimport 'hammerjs';\n\nimport { AppComponent } from './app.component';\nimport { Ng2MaskModule } from './ng2-mask/ng2-mask.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    MdGridListModule,\n    MdSidenavModule,\n    MdToolbarModule,\n    MdSelectModule,\n    MdButtonModule,\n    MdInputModule,\n    Ng2MaskModule,\n    MdIconModule,\n    MdListModule,\n    MdCardModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import {\n  Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnInit,\n  Renderer2\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst resolvedPromise: Promise<null> = Promise.resolve(null);\n\n/** TODO(custom special characters) */\n/** TODO(custom patterns) */\n/** TODO(cursor position) */\n/** TODO(create special characters object to specialCharacters directive) */\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    }\n  ]\n})\nexport class MaskDirective implements OnInit, ControlValueAccessor {\n  private _modelWithSpecialCharacters: boolean;\n  private _clearIfNotMatch: boolean;\n  private _maskExpression: string;\n  private _maskSpecialCharacters: string[] = ['/', '(', ')', '.', ':', '-', ' ', '+'];\n  private _maskAwaliablePatterns: { [key: string]: RegExp } = {\n    '0': /\\d/,\n    '9': /\\d/,\n    'A': /[a-zA-Z0-9]/,\n    'S': /[a-zA-Z]/\n  };\n\n  public constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    @Inject(DOCUMENT) private document: Document\n  ) {\n    this.modelWithSpecialCharacters = true;\n    this._clearIfNotMatch = false;\n  }\n\n  public ngOnInit(): void {\n    resolvedPromise.then(() => this._applyValueChanges());\n  }\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    if (!value) {\n      return;\n    }\n    this._maskExpression = value;\n  }\n\n  @Input('specialCharacters')\n  public get modelWithSpecialCharacters(): boolean {\n    return this._modelWithSpecialCharacters;\n  }\n\n  public set modelWithSpecialCharacters(value: boolean) {\n    this._modelWithSpecialCharacters = value;\n  }\n\n  @Input('clearIfNotMatch')\n  public get clearIfNotMatch(): boolean {\n    return this._clearIfNotMatch;\n  }\n\n  public set clearIfNotMatch(value: boolean) {\n    this._clearIfNotMatch = value;\n  }\n\n  @HostListener('input')\n  public onInput(): void {\n    this._applyValueChanges();\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._clearIfNotMatchFn();\n    this._applyValueChanges();\n  }\n\n  /** It writes the value in the input */\n  public writeValue(inputValue: string): void {\n    if (!inputValue) {\n      return;\n    }\n    this._elementRef.nativeElement.value = this._applyMask(inputValue, this._maskExpression);\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this._onChange = fn;\n    return;\n  }\n\n  /* TODO */\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void { }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'true');\n    } else {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'false');\n    }\n  }\n\n  // tslint:disable-next-line\n  private _onChange = (_: any) => { };\n\n  private _applyMask(inputValue: string, maskExpression: string): string {\n    let cursor: number = 0;\n    let result: string = '';\n    const inputArray: string[] = inputValue.split('');\n\n    // tslint:disable-next-line\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n    < inputArray.length; i++ , inputSymbol = inputArray[i]) {\n      if (result.length === maskExpression.length) {\n        break;\n      }\n\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n        result += inputSymbol;\n        cursor++;\n      } else if (this._maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n        result += maskExpression[cursor];\n        cursor++;\n        i--;\n      } else if (maskExpression[cursor] === '9') {\n        cursor++;\n        i--;\n      }\n    }\n    if (result.length + 1 === maskExpression.length\n      && this._maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n    return result;\n  }\n\n  /** Remove mask from value, based on specialCharacters */\n  private _removeMask(value: string): string {\n    if (!value) {\n      return value;\n    }\n    return value.replace(/(\\/|\\.|-|\\(|\\)|:| |\\+)/gi, '');\n  }\n\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    return inputSymbol === maskSymbol\n      || this._maskAwaliablePatterns[maskSymbol]\n      && this._maskAwaliablePatterns[maskSymbol].test(inputSymbol);\n  }\n\n  private _clearIfNotMatchFn(): void {\n    if (this.clearIfNotMatch === true && this._maskExpression.length\n      !== this._elementRef.nativeElement.value.length) {\n      this._elementRef.nativeElement.value = '';\n    }\n  }\n\n  /** It applies the mask in the input and updates the control's value. */\n  private _applyValueChanges(): void {\n    const val: string = this._elementRef.nativeElement.value;\n    const maskedInput: string = this._applyMask(val, this._maskExpression);\n\n    this._elementRef.nativeElement.value = maskedInput;\n\n    if (this.modelWithSpecialCharacters === true) {\n      this._onChange(maskedInput);\n    } else {\n      this._onChange(this._removeMask(maskedInput));\n    }\n\n    if (this._elementRef.nativeElement !== this.document.activeElement) {\n      this._clearIfNotMatchFn();\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ng2-mask/mask.directive.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaskDirective } from './mask.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MaskDirective],\n  declarations: [MaskDirective]\n})\nexport class Ng2MaskModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/ng2-mask/ng2-mask.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts"],"sourceRoot":""}