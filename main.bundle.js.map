{"version":3,"sources":["/Users/igornepipenko/work/ng2-mask/src/$_gendir lazy","/Users/igornepipenko/work/ng2-mask/src/app/app.component.css","/Users/igornepipenko/work/ng2-mask/src/app/app.component.html","/Users/igornepipenko/work/ng2-mask/src/app/app.component.ts","/Users/igornepipenko/work/ng2-mask/src/app/app.module.ts","/Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/config.ts","/Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/mask.directive.ts","/Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/mask.service.ts","/Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/ngx-mask.module.ts","/Users/igornepipenko/work/ng2-mask/src/environments/environment.ts","/Users/igornepipenko/work/ng2-mask/src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;ACVA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;ACXA,uCAAuC,kBAAkB,sBAAsB,GAAG,+jDAA+jD,qCAAqC,yGAAyG,mCAAmC,opFAAopF,yDAAyD,yGAAyG,iCAAiC,gjCAAgjC,mEAAmE,yGAAyG,yDAAyD,ygB;;;;;;;;;;;;;;;;;;;;ACAh3L;AACjB;AAO7C;IAWE;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,mEAAW,CAAC,UAAU,CAAC,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,IAAI,mEAAW,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,mBAAmB,GAAG,IAAI,mEAAW,EAAE,CAAC;IAC/C,CAAC;IAfU,YAAY;QALxB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,0EAAmC;YACnC,yEAAkC;SACnC,CAAC;;OACW,YAAY,CAiBxB;IAAD,mBAAC;CAAA;AAjBwB;;;;;;;;;;;;;;;;;;;;;;;;;;ACRsD;AAQvD;AAC0C;AACR;AACf;AACF;AACvB;AAE6B;AACY;AA0B3D;IAAA;IACA,CAAC;IADY,SAAS;QAxBrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;aACb;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,qGAAuB;gBACvB,2EAAmB;gBACnB,2EAAgB;gBAChB,0EAAe;gBACf,0EAAe;gBACf,yEAAc;gBACd,yEAAc;gBACd,wEAAa;gBACb,gFAAa,CAAC,OAAO,EAAE;gBACvB,uEAAY;gBACZ,uEAAY;gBACZ,uEAAY;gBACZ,mEAAW;gBACX,iEAAU;aACX;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CACrB;IAAD,gBAAC;CAAA;AADqB;;;;;;;;;;;;AC1CyB;AAcxC,IAAM,MAAM,GAA2B,IAAI,qEAAc,CAAC,QAAQ,CAAC,CAAC;AAEpE,IAAM,aAAa,GAAY;IACpC,eAAe,EAAE,KAAK;IACtB,qBAAqB,EAAE,IAAI;IAC3B,iBAAiB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC3D,QAAQ,EAAE;QACR,GAAG,EAAE;YACH,OAAO,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC;SAC3B;QACD,GAAG,EAAE;YACH,OAAO,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC;YAC1B,QAAQ,EAAE,IAAI;SACf;QACD,GAAG,EAAE;YACH,OAAO,EAAE,IAAI,MAAM,CAAC,eAAe,CAAC;SACrC;QACD,GAAG,EAAE;YACH,OAAO,EAAE,IAAI,MAAM,CAAC,YAAY,CAAC;SAClC;KACF;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;AChCqB;AACkD;AAC5B;AAG7C,IAAM,eAAe,GAAkB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAa7D;IACE,uBACU,WAAuB,EACvB,SAAoB,EACpB,YAAyB;QAFzB,gBAAW,GAAX,WAAW,CAAY;QACvB,cAAS,GAAT,SAAS,CAAW;QACpB,iBAAY,GAAZ,YAAY,CAAa;IAChC,CAAC;sBALO,aAAa;IAOjB,gCAAQ,GAAf;QAAA,iBAEC;QADC,eAAe,CAAC,IAAI,CAAC,cAAM,YAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,EAAnE,CAAmE,CAAC,CAAC;IAClG,CAAC;IAGD,sBAAW,yCAAc;aAAzB,UAA0B,KAAa;YACrC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,KAAK,CAAC;QAC3C,CAAC;;;OAAA;IAGD,sBAAW,4CAAiB;aAA5B,UAA6B,KAAmC;YAC9D,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC7E,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,YAAY,CAAC,qBAAqB,GAAG,KAAK,CAAC;QAClD,CAAC;;;OAAA;IAGD,sBAAW,mCAAQ;aAAnB,UAAoB,KAA0B;YAC5C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC;YACT,CAAC;YACD,IAAI,CAAC,YAAY,CAAC,qBAAqB,GAAG,KAAK,CAAC;QAClD,CAAC;;;OAAA;IAGD,sBAAW,gDAAqB;aAAhC,UAAiC,KAAuC;YACtE,IAAI,CAAC,YAAY,CAAC,qBAAqB,GAAG,KAAK,CAAC;QAClD,CAAC;;;OAAA;IAGD,sBAAW,0CAAe;aAA1B,UAA2B,KAAiC;YAC1D,IAAI,CAAC,YAAY,CAAC,eAAe,GAAG,KAAK,CAAC;QAC5C,CAAC;;;OAAA;IAGM,+BAAO,GAAd,UAAe,CAAgB;QAC7B,IAAM,EAAE,GAAsB,CAAC,CAAC,MAA2B,CAAC;QAC5D,IAAM,QAAQ,GAAW,EAAE,CAAC,cAAc,CAAC;QAE3C,IAAI,UAAU,GAAW,CAAC,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,iBAAiB,CACjC,IAAI,CAAC,WAAW,CAAC,aAAa,EAC9B,QAAQ,EACR,UAAC,KAAa,IAAK,iBAAU,GAAG,KAAK,EAAlB,CAAkB,CACtC,CAAC;QACF,EAAE,CAAC,cAAc,GAAG,EAAE,CAAC,YAAY,GAAG,QAAQ,GAAG;QAC/C,2BAA2B;QAC1B,CAAS,CAAC,SAAS,KAAK,uBAAuB;YAC9C,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,UAAU,CACf,CAAC;IACJ,CAAC;IAGM,8BAAM,GAAb;QACE,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACpE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAED,uCAAuC;IAChC,kCAAU,GAAjB,UAAkB,UAAkB;QAClC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACnH,CAAC;IAED,2BAA2B;IACpB,wCAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC;IAClC,CAAC;IAED,2BAA2B;IACpB,yCAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,EAAE,CAAC;IACjC,CAAC;IAED,oCAAoC;IAC7B,wCAAgB,GAAvB,UAAwB,UAAmB;QACzC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;QACzF,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;IACpF,CAAC;IAnFD;QADC,oEAAK,CAAC,MAAM,CAAC;;;uDAMb;IAGD;QADC,oEAAK,EAAE;;;0DAMP;IAGD;QADC,oEAAK,EAAE;;;iDAMP;IAGD;QADC,oEAAK,EAAE;;;8DAGP;IAGD;QADC,oEAAK,EAAE;;;wDAGP;IAGD;QADC,2EAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;;;gDAiBjC;IAGD;QADC,2EAAY,CAAC,MAAM,CAAC;;;;+CAKpB;IArEU,aAAa;QAXzB,wEAAS,CAAC;YACT,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,yEAAiB;oBAC1B,WAAW,EAAE,2EAAU,CAAC,cAAM,sBAAa,EAAb,CAAa,CAAC;oBAC5C,KAAK,EAAE,IAAI;iBACZ;gBACD,kEAAW;aACZ;SACF,CAAC;6DAGuB,iEAAU,oBAAV,iEAAU,sDACZ,iEAAS,oBAAT,iEAAS,sDACN,kEAAW,oBAAX,kEAAW;OAJxB,aAAa,CAgGzB;IAAD,oBAAC;;CAAA;AAhGyB;;;;;;;;;;;;;;;;;;;;;;;;;ACrByB;AACR;AACA;AAG3C;IAUE,qBAC4B,QAAkB,EACpB,OAAgB;QADd,aAAQ,GAAR,QAAQ,CAAU;QACpB,YAAO,GAAP,OAAO,CAAS;QARnC,mBAAc,GAAW,EAAE,CAAC;QAI3B,WAAM,GAAgB,IAAI,GAAG,EAAE,CAAC;QAexC,2BAA2B;QACpB,aAAQ,GAAG,UAAC,CAAM,IAAO,CAAC,CAAC;QAE3B,YAAO,GAAG,cAAQ,CAAC,CAAC;QAZzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;QACpD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC;QAChE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;QAC5D,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,qBAAqB;aAC1D,GAAG,CAAC,UAAC,IAAY,IAAK,cAAK,IAAM,EAAX,CAAW,CAAC;aAClC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACtB,CAAC;IAOM,+BAAS,GAAhB,UAAiB,UAAkB,EAAE,cAAsB,EAAE,QAAoB,EAAE,EAAuB;QAA7C,uCAAoB;QAAE,wCAAsB,CAAC;QACxG,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,MAAM,GAAW,EAAE,CAAC;QAExB,IAAM,UAAU,GAAa,UAAU,CAAC,QAAQ,EAAE;aAC/C,KAAK,CAAC,EAAE,CAAC,CAAC;QACb,2BAA2B;QAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,WAAW,GAAW,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;cAC5D,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAG,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;YACvD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5C,KAAK,CAAC;YACR,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,IAAI,WAAW,CAAC;gBACtB,MAAM,EAAE,CAAC;YACX,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7E,MAAM,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;gBACjC,MAAM,EAAE,CAAC;gBACT,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACxB,CAAC,EAAE,CAAC;YACN,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;mBAC1D,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;mBAClD,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjE,MAAM,EAAE,CAAC;gBACT,CAAC,EAAE,CAAC;YACN,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,KAAK,cAAc,CAAC,MAAM;eAC1C,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1F,MAAM,IAAI,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtD,CAAC;QAED,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,IAAI,WAAW,GAAW,QAAQ,GAAG,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC;YACpC,KAAK,EAAE,CAAC;YACR,WAAW,EAAE,CAAC;QAChB,CAAC;QACD,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEM,uCAAiB,GAAxB,UAAyB,OAAyB,EAAE,QAAoB,EAAE,EAAuB;QAA7C,uCAAoB;QAAE,wCAAsB,CAAC;QAC/F,IAAM,GAAG,GAAW,OAAO,CAAC,KAAK,CAAC;QAClC,IAAM,WAAW,GAAW,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEnF,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,KAAK,IAAI,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7B,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAEM,uCAAiB,GAAxB,UAAyB,OAAyB;QAChD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM;gBACzD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAa;QAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAClD,CAAC;IAEO,sCAAgB,GAAxB,UAAyB,WAAmB,EAAE,UAAkB;QAC9D,MAAM,CAAC,WAAW;gBACZ,UAAU;eACX,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,OAAO;mBACxF,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxE,CAAC;IA/GU,WAAW;QADvB,yEAAU,EAAE;QAYR,gFAAM,CAAC,iEAAQ,CAAC;QAChB,gFAAM,CAAC,uDAAM,CAAC;qEAAkB,gDAAO,oBAAP,gDAAO;OAZ/B,WAAW,CAgHvB;IAAD,kBAAC;;CAAA;AAhHuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLsC;AACf;AACE;AAES;AAO1D;IAAA;IAeA,CAAC;sBAfY,aAAa;IAEV,qBAAO,GAArB,UAAsB,WAAoC;QAApC,0GAAoC;QACxD,MAAM,CAAC;YACL,QAAQ,EAAE,eAAa;YACvB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,uDAAM;oBACf,QAAQ,eAAO,8DAAa,EAAK,WAAW,CAAE;iBAC/C;aACF;SACF,CAAC;IACJ,CAAC;IAZU,aAAa;QALzB,uEAAQ,CAAC;YACR,OAAO,EAAE,CAAC,qEAAY,CAAC;YACvB,OAAO,EAAE,CAAC,sEAAa,CAAC;YACxB,YAAY,EAAE,CAAC,sEAAa,CAAC;SAC9B,CAAC;OACW,aAAa,CAezB;IAAD,oBAAC;;CAAA;AAfyB;;;;;;;;;ACX1B;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,+EAA+E;AAExE,IAAM,WAAW,GAAQ;IAC9B,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;ACPyE;AAC5B;AACU;AACZ;AAE7C,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,+EAAc,EAAE,CAAC;AACnB,CAAC;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/igornepipenko/work/ng2-mask/src/$$_gendir lazy\n// module id = ../../../../../src/$$_gendir lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/igornepipenko/work/ng2-mask/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<style>\\nmd-sidenav {\\n  display: flex;\\n  overflow: visible;\\n}\\n\\n</style>\\n\\n<md-sidenav-container>\\n\\n  <md-sidenav mode=\\\"side\\\" opened=\\\"false\\\">\\n    Side menu\\n  </md-sidenav>\\n\\n  <div class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <header>\\n          <h1>\\n            <span class=\\\"jq-label\\\">Angular</span>\\n            <span class=\\\"plugin-name\\\">Mask Plugin</span>\\n          </h1>\\n          <span class=\\\"subtitle\\\">An Angular Plugin to make masks on form fields and html elements.</span>\\n        </header>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\n\\n          <md-grid-tile>\\n            <md-toolbar color=\\\"primary\\\">\\n              <span>Examples</span>\\n            </md-toolbar>\\n          </md-grid-tile>\\n\\n        </md-grid-list>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Mask common case</md-card-title>\\n            <md-card-subtitle>An case of date mask</md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Date\\\" mask=\\\"00/00/0000\\\" [formControl]=\\\"form\\\" [(ngModel)]=\\\"dateModel\\\">\\n                  <md-hint><b>Mask:</b> 00/00/0000</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ form.value ? form.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ dateModel ? dateModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Other common cases</md-card-title>\\n            <md-card-subtitle>Other common cases that you could apply in your projects. Try your self. :D</md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Date and Hour\\\" mask=\\\"00/00/00 00:00:00\\\">\\n                  <md-hint><b>Mask:</b> 00/00/00 00:00:00</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Hour\\\" mask=\\\"00:00:00\\\">\\n                  <md-hint><b>Mask:</b> 00:00:00</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Mixed Type\\\" mask=\\\"AAA 000-S0S\\\">\\n                  <md-hint><b>Mask:</b> AAA 000-S0S</md-hint>\\n                </md-input-container>\\n              </div>\\n\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Phone\\\" mask=\\\"(000) 000-0000\\\">\\n                  <md-hint><b>Mask:</b> (000) 000-0000</md-hint>\\n                </md-input-container>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Masks and special characters</md-card-title>\\n            <md-card-subtitle>\\n              You could define if you want special characters propagate to the model or not with the\\n              attribute <b>dropSpecialCharacters</b>.\\n            </md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"CPF\\\" [dropSpecialCharacters]=\\\"true\\\" mask=\\\"000.000.000-00\\\" [formControl]=\\\"cpfFormControl\\\" [(ngModel)]=\\\"cpfModel\\\">\\n                  <md-hint><b>Mask:</b> 000.000.000-00</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ cpfFormControl.value ? cpfFormControl.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ cpfModel ? cpfModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-card>\\n          <md-card-header>\\n            <md-card-title>Clear if not match</md-card-title>\\n            <md-card-subtitle>\\n              You could clear the input if the value not match the mask, you'll just need to set <b>clearIfNotMatch</b> attribute.\\n            </md-card-subtitle>\\n          </md-card-header>\\n          <md-card-content>\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-md-3\\\">\\n                <md-input-container>\\n                  <input mdInput placeholder=\\\"Clear if not match\\\" [clearIfNotMatch]=\\\"true\\\" mask=\\\"000.000\\\"\\n                    [formControl]=\\\"clearIfNotMatchForm\\\" [(ngModel)]=\\\"clearIfNotMatchModel\\\">\\n                  <md-hint><b>Mask:</b> 000.000</md-hint>\\n                </md-input-container>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>FormControl:</b> {{ clearIfNotMatchForm.value ? clearIfNotMatchForm.value : 'Empty' }}</p>\\n              </div>\\n              <div class=\\\"col-md-3\\\">\\n                <p><b>NgModel:</b> {{ clearIfNotMatchModel ? clearIfNotMatchModel : 'Empty' }}</p>\\n              </div>\\n            </div>\\n          </md-card-content>\\n        </md-card>\\n\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-12\\\">\\n\\n        <md-grid-list cols=\\\"1\\\" rowHeight=\\\"140px\\\">\\n\\n          <md-grid-tile>\\n            <md-toolbar color=\\\"primary\\\">\\n              <span>Documentation - comming soon...</span>\\n            </md-toolbar>\\n          </md-grid-tile>\\n\\n        </md-grid-list>\\n\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n</md-sidenav-container>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/igornepipenko/work/ng2-mask/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component, ElementRef, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  public form: FormControl;\n  public dateModel: string;\n\n  public cpfFormControl: FormControl;\n  public cpfModel: string;\n\n  public clearIfNotMatchForm: FormControl;\n  public clearIfNotMatchModel: string;\n\n  public constructor() {\n    this.form = new FormControl('30081991');\n    this.cpfFormControl = new FormControl('04787954778');\n    this.clearIfNotMatchForm = new FormControl();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/app.component.ts","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MdButtonModule, MdCardModule, MdGridListModule, MdIconModule, MdInputModule,\n  MdListModule,\n  MdSelectModule, MdSidenavModule,\n  MdToolbarModule\n}\n  from\n    '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\nimport { NgModule } from '@angular/core';\nimport 'hammerjs';\n\nimport { AppComponent } from './app.component';\nimport { NgxMaskModule } from './ngx-mask/ngx-mask.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    MdGridListModule,\n    MdSidenavModule,\n    MdToolbarModule,\n    MdSelectModule,\n    MdButtonModule,\n    MdInputModule,\n    NgxMaskModule.forRoot(),\n    MdIconModule,\n    MdListModule,\n    MdCardModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/app.module.ts","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  clearIfNotMatch: boolean;\n  dropSpecialCharacters: boolean;\n  specialCharacters: string[];\n  patterns: {\n    [character: string]: {\n      pattern: RegExp,\n      optional?: boolean\n    }\n  };\n}\n\nexport const config: InjectionToken<string> = new InjectionToken('config');\n\nexport const initialConfig: IConfig = {\n  clearIfNotMatch: false,\n  dropSpecialCharacters: true,\n  specialCharacters: ['/', '(', ')', '.', ':', '-', ' ', '+'],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    'A': {\n      pattern: new RegExp('\\[a-zA-Z0-9\\]')\n    },\n    'S': {\n      pattern: new RegExp('\\[a-zA-Z\\]')\n    }\n  }\n};\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/config.ts","import {\n  Directive, ElementRef, forwardRef, HostListener, Input, OnInit,\n  Renderer2\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MaskService } from './mask.service';\nimport { IConfig } from './config';\n\nconst resolvedPromise: Promise<null> = Promise.resolve(null);\n\n@Directive({\n  selector: '[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true\n    },\n    MaskService\n  ],\n})\nexport class MaskDirective implements OnInit, ControlValueAccessor {\n  public constructor(\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2,\n    private _maskService: MaskService,\n  ) {}\n\n  public ngOnInit(): void {\n    resolvedPromise.then(() => this._maskService.applyValueChanges(this._elementRef.nativeElement));\n  }\n\n  @Input('mask')\n  public set maskExpression(value: string) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskExpression = value;\n  }\n\n  @Input()\n  public set specialCharacters(value: IConfig['specialCharacters']) {\n    if (!value || !Array.isArray(value) || Array.isArray(value) && !value.length) {\n      return;\n    }\n    this._maskService.maskSpecialCharacters = value;\n  }\n\n  @Input()\n  public set patterns(value: IConfig['patterns']) {\n    if (!value) {\n      return;\n    }\n    this._maskService.maskAvailablePatterns = value;\n  }\n\n  @Input()\n  public set dropSpecialCharacters(value: IConfig['dropSpecialCharacters']) {\n    this._maskService.dropSpecialCharacters = value;\n  }\n\n  @Input()\n  public set clearIfNotMatch(value: IConfig['clearIfNotMatch']) {\n    this._maskService.clearIfNotMatch = value;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: KeyboardEvent): void {\n    const el: HTMLInputElement = (e.target as HTMLInputElement);\n    const position: number = el.selectionStart;\n\n    let caretShift: number = 0;\n    this._maskService.applyValueChanges(\n      this._elementRef.nativeElement,\n      position,\n      (shift: number) => caretShift = shift\n    );\n    el.selectionStart = el.selectionEnd = position + (\n      // tslint:disable-next-line\n      (e as any).inputType === 'deleteContentBackward'\n        ? 0\n        : caretShift\n    );\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    this._maskService.clearIfNotMatchFn(this._elementRef.nativeElement);\n    this._maskService.applyValueChanges(this._elementRef.nativeElement);\n    this._maskService.onTouch();\n  }\n\n  /** It writes the value in the input */\n  public writeValue(inputValue: string): void {\n    if (!inputValue) {\n      return;\n    }\n    this._elementRef.nativeElement.value = this._maskService.applyMask(inputValue, this._maskService.maskExpression);\n  }\n\n  // tslint:disable-next-line\n  public registerOnChange(fn: any): void {\n    this._maskService.onChange = fn;\n  }\n\n  // tslint:disable-next-line\n  public registerOnTouched(fn: any): void {\n    this._maskService.onTouch = fn;\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    if (isDisabled) {\n      return this._renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'true');\n    }\n    return this._renderer.removeAttribute(this._elementRef.nativeElement, 'disabled');\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/mask.directive.ts","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable()\nexport class MaskService {\n\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public clearIfNotMatch: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public maskSpecialCharacters: IConfig['specialCharacters'];\n  public maskAvailablePatterns: IConfig['patterns'];\n  private _regExpForRemove: RegExp;\n  private _shift: Set<number> = new Set();\n\n  public constructor(\n    @Inject(DOCUMENT) private document: Document,\n    @Inject(config) private _config: IConfig,\n  ) {\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this._regExpForRemove = new RegExp(this.maskSpecialCharacters\n      .map((item: string) => `\\\\${item}`)\n      .join('|'), 'gi');\n  }\n\n  // tslint:disable-next-line\n  public onChange = (_: any) => { };\n\n  public onTouch = () => { };\n\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => {}): string {\n    if (inputValue === undefined || inputValue === null) {\n      return '';\n    }\n\n    let cursor: number = 0;\n    let result: string = '';\n\n    const inputArray: string[] = inputValue.toString()\n      .split('');\n    // tslint:disable-next-line\n    for (let i: number = 0, inputSymbol: string = inputArray[0]; i\n    < inputArray.length; i++ , inputSymbol = inputArray[i]) {\n      if (result.length === maskExpression.length) {\n        break;\n      }\n\n      if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n        result += inputSymbol;\n        cursor++;\n      } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n        result += maskExpression[cursor];\n        cursor++;\n        this._shift.add(cursor);\n        i--;\n      } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1\n        && this.maskAvailablePatterns[maskExpression[cursor]]\n        && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n        cursor++;\n        i--;\n      }\n    }\n    if (result.length + 1 === maskExpression.length\n      && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let shift: number = 1;\n    let newPosition: number = position + 1;\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n    cb(this._shift.has(position) ? shift : 0);\n    return result;\n  }\n\n  public applyValueChanges(element: HTMLInputElement, position: number = 0, cb: Function = () => {}): void {\n    const val: string = element.value;\n    const maskedInput: string = this.applyMask(val, this.maskExpression, position, cb);\n\n    element.value = maskedInput;\n\n    if (this.dropSpecialCharacters === true) {\n      this.onChange(this._removeMask(maskedInput));\n    } else {\n      this.onChange(maskedInput);\n    }\n\n    if (element !== this.document.activeElement) {\n      this.clearIfNotMatchFn(element);\n    }\n  }\n\n  public clearIfNotMatchFn(element: HTMLInputElement): void {\n    if (this.clearIfNotMatch === true && this.maskExpression.length\n      !== element.value.length) {\n      element.value = '';\n    }\n  }\n\n  private _removeMask(value: string): string {\n    if (!value) {\n      return value;\n    }\n    return value.replace(this._regExpForRemove, '');\n  }\n\n  private _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    return inputSymbol\n      === maskSymbol\n      || this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern\n      && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/mask.service.ts","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaskDirective } from './mask.directive';\n\nimport { config, IConfig, initialConfig } from './config';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MaskDirective],\n  declarations: [MaskDirective]\n})\nexport class NgxMaskModule {\n\n  public static forRoot(configValue: IConfig = initialConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: config,\n          useValue: { ...initialConfig, ...configValue }\n        }\n      ]\n    };\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/app/ngx-mask/ngx-mask.module.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment: Env = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/environments/environment.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// /Users/igornepipenko/work/ng2-mask/src/main.ts"],"sourceRoot":"webpack:///"}